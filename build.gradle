plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.20.0'
	id 'jacoco'
	id "org.sonarqube" version "6.0.1.5171"
}

group = 'depromeet'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

spotless {
	java {
		// Import 순서
		importOrder("java", "javax", "jakarta", "org", "com")
		// 사용하지 않는 import 자동 제거
		removeUnusedImports()
		//구글 자바 포맷 적용
		googleJavaFormat()
		// 파일 끝에 개행 추가
		endWithNewline()
		// 각 라인 끝에 공백 제거
		trimTrailingWhitespace()
		// 애노테이션 포맷팅 정리 (한 줄에 한 개씩 배치)
		formatAnnotations()
	}
}

jacoco {
	toolVersion = "0.8.12"
}

//QueryDSL이 자동 생성하는 Q 클래스들을 제외하기 위한 리스트 생성
def QDomains = []
for (qPattern in '*.QA'..'*.QZ') {
	QDomains.add(qPattern + '*')
}

def jacocoExcludePatterns = [
		// 측정 안하고 싶은 패턴
		"**/*Application*",
		"**/*Config*",
		"**/*Exception*",
		"**/*Request*",
		"**/*Response*",
		"**/*Dto*",
		"**/*Interceptor*",
		"**/*Filter*",
		"**/*Resolver*",
		"**/*Entity*",
		"**/test/**",
		"**/resources/**"
]

jacocoTestCoverageVerification {

	violationRules {
		rule {
			enabled = true
			element = 'CLASS' // 클래스 단위로 검증

			// 라인 커버리지를 최소 80% 만족
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 브랜치 커버리지를 최소 80% 만족
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			excludes = jacocoExcludePatterns + QDomains // 제외 대상 반영
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // 테스트 완료 후 JaCoCo 리포트 생성
}

def jacocoDir = layout.buildDirectory.dir("reports/")

jacocoTestReport {
	dependsOn test	// 테스트 실행 후 리포트 생성
	reports {
		html.required.set(true)
		xml.required.set(true)
		csv.required.set(true)
		html.destination jacocoDir.get().file("jacoco/index.html").asFile
		xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
		csv.destination jacocoDir.get().file("jacoco/index.csv").asFile
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains) // 제외 대상 반영
				})
		)
	}
	finalizedBy jacocoTestCoverageVerification
}



sonar {
	properties {
		property "sonar.projectKey", "depromeet-onepiece_onepiece"
		property "sonar.organization", "depromeet-onepiece"
		property "sonar.host.url", "https://sonarcloud.io"
		// 자코코 결과 리포트 주소
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/index.xml'
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		// 테스트 커버리지에서 제외할 클래스
		property 'sonar.exclusions', '**/test/**, **/resources/**, **/*Application*.java, **/*Controller*.java, **/*Config.java' +
				'**/*Response.java, **/*Exception.java, **/security/**, **/support/**, **/Q*.java'
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.java.coveragePlugin', 'jacoco'
	}
}

tasks.register("updateGitHooks", Copy) {
	from(file("${rootProject.rootDir}/scripts/pre-commit"))
	into(file("${rootProject.rootDir}/.git/hooks"))
}

tasks.register('makeGitHooksExecutable', Exec) {
	if (System.getProperty("os.name").contains("Windows")) {
		commandLine("attrib", "+x", "${rootProject.rootDir}/.git/hooks/pre-commit")
	} else {
		commandLine("chmod", "+x", "${rootProject.rootDir}/.git/hooks/pre-commit")
	}
	dependsOn("updateGitHooks")
}

tasks.withType(JavaCompile) {
	dependsOn("makeGitHooksExecutable")
}

